/*
 * Copyright (c) 2020 The ZMK Contributors
 *
 * SPDX-License-Identifier: MIT
 */

#include <behaviors.dtsi>
#include <dt-bindings/zmk/keys.h>
#include <dt-bindings/zmk/bt.h>


#define SAIL 3
#define wasdGAMING 4
#define esdfGAMING 5
#define MEH(key) LS(LC(LA(key)))

/ {
    macros {
		ZMK_MACRO(equiv,
			wait-ms = <0>;
			tap-ms = <0>;
			bindings
				= <&macro_tap     &kp RALT &kp U &kp KP_N2 &kp KP_N2 &kp KP_N6 &kp KP_N1 &kp RET>;
		)
	};
};

/ {
    macros {
		ZMK_MACRO(equiv2,
			wait-ms = <0>;
			tap-ms = <0>;
			bindings
				= <&macro_tap     &kp KP_N2 &kp KP_N2 &kp KP_N6 &kp KP_N1 &kp LALT &kp X>;
		)
	};
};


#define AC(keycode) &ac LC(keycode) keycode     // Autoctrl Macro

/ {
    behaviors {
        ac: auto_ctrl {
            compatible = "zmk,behavior-hold-tap";
            label = "AUTO_CTRL";
            #binding-cells = <2>;
            tapping_term_ms = <200>;
            quick_tap_ms = <125>;
			global-quick-tap;
            flavor = "tap-preferred";
            bindings = <&kp>, <&kp>;
        };
    };
};
	
/ {
    behaviors {
        tdmedia: tap_dance_media {
            compatible = "zmk,behavior-tap-dance";
            label = "TAP_DANCE_MEDIA";
            #binding-cells = <0>;
            tapping-term-ms = <300>;
            bindings =
				<&ht C_MUTE C_PLAY_PAUSE>, <&kp C_NEXT>, <&kp C_PREVIOUS>;
        };
    };
};

/ {
    behaviors {
        ht: hold_tap {
            compatible = "zmk,behavior-hold-tap";
            label = "HOLD_TAP";
            #binding-cells = <2>;
            tapping_term_ms = <200>;
            quick_tap_ms = <125>;
            flavor = "tap-preferred";
            bindings = <&kp>, <&kp>;
        };
    };
};

/ {
    behaviors {
        hmtl: hold_mod_tap_layer {
            compatible = "zmk,behavior-hold-tap";
            label = "HOLD_MOD_TAP_LAYER";
            #binding-cells = <2>;
            tapping_term_ms = <200>;
            quick_tap_ms = <125>;
			global-quick-tap;
            flavor = "tap-preferred";
            bindings = <&kp>, <&to>;
        };
    };
};

/ {
    keymap {
        compatible = "zmk,keymap";

        default_layer {
// ------------------------------------------------------------------------------------------------------------
// |  ESC  |  1  |  2  |  3   |  4   |  5   |                   |  6   |  7    |  8    |  9   |   0   |  DEL  |
// |  TAB  |  Q  |  W  |  E   |  R   |  T   |                   |  Y   |  U    |  I    |  O   |   P   | BKSPC |
// |  SAIL |  A  |  S  |  D   |  F   |  G   |                   |  H   |  J    |  K    |  L   |   ;   |   '   |
// | SHIFT |  Z  |  X  |  C   |  V   |  B   |  MUTE  |  |  MIC  |  N   |  M    |  ,    |  .   |   /   | SHIFT |
//               | GUI | ALT  | CTRL | LOWER|  SPACE |  | ENTER | RAISE| CTRL  | ALT   | GUI  |
            bindings = <
&kp ESC    &ac F1 N1 &ac F2 N2 &ac F3 N3  &ac F4 N4  &ac F5 N5                               &ac F6 N6 &ac F7 N7 &ac F8 N8  &ac F9 N9 &ac F10 N0 &kp DEL 
&kp TAB    AC(Q)     AC(W)      AC(E)     AC(R)      AC(T)                                   AC(Y)     AC(U)     AC(I)      AC(O)     AC(P)      &kp BSPC
&mo 3      AC(A)     AC(S)      AC(D)     AC(F)      AC(G)                                   AC(H)     AC(J)     AC(K)      AC(L)     &kp SEMI   &kp SQT
&kp LSHFT  AC(Z)     AC(X)      AC(C)     AC(V)      AC(B)         &tdmedia       &kp MEH(M) AC(N)     AC(M)     &kp COMMA  &kp DOT   &kp FSLH   &kp RSHFT
                     &kp LGUI   &kp LALT  &kp LCTRL  &hmtl LSHFT 2 &lt 1 SPACE    &kp RET    &mo 2     &kp RCTRL &mo 3      &to 4
            >;

            sensor-bindings = <&inc_dec_kp C_VOL_UP C_VOL_DN &inc_dec_kp PG_UP PG_DN>;
        };



        lower_layer {
// TODO: Some binds are waiting for shifted keycode support.
// ------------------------------------------------------------------------------------------------------------
// |  NUM  |  F1 |  F2 |  F3  |  F4  |  F5  |                   |  F6  |  F7   |  F8   |  F9  |  F10  |  F11  |
// | `     |   1 |   2 |   3  |   4  |   5  |                   |   6  |   7   |   8   |   9  |    0  |  F12  |
// |       |  !  |  @  |  #   |  $   |  %   |                   |  ^   |  &    |  *    |  (   |   )   |   |   |
// |       |  =  |  -  |  +   |  {   |  }   |        |  |       |  [   |  ]    |  ;    |  :   |   \   |       |
//               |     |      |      |      |        |  |       |      |       |       |      |
            bindings = <
&kp KP_NUM &kp F1    &kp F2    &kp F3      &kp F4    &kp F5                     &kp F6    &kp F7   &kp F8          &kp F9    &kp F10   &trans
&kp GRAVE  &kp N1    &kp N2    &kp N3      &kp N4    &kp N5                     &kp N6    &kp N7   &kp N8          &kp N9    &kp N0    &trans
&trans     &kp EXCL  &kp AT    &kp HASH    &kp DLLR  &kp PRCNT                  &kp CARET &kp AMPS &kp KP_MULTIPLY &kp LPAR  &kp RPAR  &kp PIPE
&trans     &kp EQUAL &kp MINUS &kp KP_PLUS &kp LBRC  &kp RBRC   &trans   &trans &kp LBKT  &kp RBKT &kp SEMI        &kp COLON &kp BSLH  &trans
                     &trans    &trans      &trans    &trans     &trans   &trans &trans    &trans   &trans          &trans
            >;

            sensor-bindings = <&inc_dec_kp C_VOL_UP C_VOL_DN &inc_dec_kp PG_UP PG_DN>;
        };



        raise_layer {
// ------------------------------------------------------------------------------------------------------------
// |BTCLR| BT1  | BT2  |  BT3  |  BT4  |  BT5 |                |      |      |       |      |       |       |
// |     |      | HOME |   ^   |  END  | PGUP |                | PGUP | HOME |   ^   |  END |       |       |
// |SHIFT| SHIFT|   <- |   v   |  ->   | PGDN |                | PGDN |   <- |   v   |  ->  | SHFIT | SHIFT |
// |     | CTRL |      |       |       |      |      |  |      |      |      |       |      | CTRL  |       |
//              |      |       |       |      |      |  |      |      |      |       |      |
            bindings = < 
&bt BT_CLR &bt BT_SEL 0 &bt BT_SEL 1 &bt BT_SEL 2 &bt BT_SEL 3 &bt BT_SEL 4                      &none     &none     &none    &none     &none     &trans
&trans     &none        &kp HOME     &kp UP       &kp END      &kp PG_UP                         &kp PG_UP &kp HOME  &kp UP   &kp END   &kp PSCRN &trans
&trans     &kp LSHFT    &kp LEFT     &kp DOWN     &kp RIGHT    &kp PG_DN                         &kp PG_DN &kp LEFT  &kp DOWN &kp RIGHT &kp RSHFT &kp RSHFT
&trans     &kp LCTRL    &none        &none        &none        &none         &trans      &trans  &none     &none     &none    &none     &kp RSHFT &trans
                        &trans       &trans       &trans       &hmtl LSHFT 0 &kp LCTRL   &trans  &trans    &trans    &trans   &trans
            >;

            sensor-bindings = <&inc_dec_kp C_VOL_UP C_VOL_DN &inc_dec_kp PG_UP PG_DN>;
        };
		
		
		
		sail_layer {
// ------------------------------------------------------------------------------------------------------------
// |     |  ≡   |   ∩  |   ∪   |   ⊂   |   $  |                |   $   |   %   |   ~   |   _   |       |       |
// |     |      |      |   @   |   #   |   &  |                |       |   `   |   '   |   {   |   }   |  BKSP |
// |  ⊗  |  ≤   |   ≥  |   <   |   >   |   ≠  |                |   =   |   ←   |   →   |   ↔   |   ↓   |       |
// |SHIFT|   α  |   β  |   ε   |   λ   |   π  |      |  |      |   ∀   |   ∃   |   !   |   ?   |   ∂   | SHIFT |
//              |      |       |       |      |      |  |      |       |       |       |       |
            bindings = <
&none      &none        &none        &none        &none        &none                    &kp DLLR     &kp PRCNT &kp TILDE2 &kp UNDER &none    &trans 
&kp TAB    &none        &none        &kp LS(SQT)  &kp NUHS     &kp AMPS                 &none        &kp GRAVE &kp SQT    &kp LBRC  &kp RBRC &trans
&none      &none        &none        &kp LT       &kp GT       &none                    &kp KP_EQUAL &kp LEFT  &kp RIGHT  &none     &none    &none    
&none      &none        &none        &none        &none        &none    &trans  &trans  &none        &none     &kp EXCL   &kp QMARK &none    &kp RSHFT 
                        &trans       &trans       &trans       &trans   &trans  &trans  &trans       &trans    &trans     &trans 
            >;

            sensor-bindings = <&inc_dec_kp C_VOL_UP C_VOL_DN &inc_dec_kp PG_UP PG_DN>;
        };
		    
			
			
		wasdgaming_layer {
			bindings = <
&kp ESC   &kp N1   &kp N2   &kp N3   &kp N4    &kp N5                          &kp N6  &kp N7    &kp N8    &kp N9    &kp N0   &trans
&kp TAB   &kp Q    &kp W    &kp E    &kp R     &kp T                           &kp Y   &kp U     &kp I     &kp O     &kp P    &trans
&none     &kp A    &kp S    &kp D    &kp F     &kp G                           &kp H   &kp J     &kp K     &kp L     &kp SEMI &kp SQT
&kp LSHFT &kp Z    &kp X    &kp C    &kp V     &kp B     &trans       &trans   &kp N   &kp M     &kp COMMA &kp DOT   &kp FSLH &kp RSHFT
                   &kp LGUI &kp LALT &kp LCTRL &kp SPACE &kp SPACE    &kp RET  &mo 2   &kp RCTRL &to 5     &to 0
			>;

			sensor-bindings = <&inc_dec_kp C_VOL_UP C_VOL_DN &inc_dec_kp PG_UP PG_DN>;
		};
		
		
		esdfgaming_layer {
			bindings = <
&kp ESC   &kp N1    &kp N2   &kp N3   &kp N4    &kp N5                          &kp N6  &kp N7    &kp N8    &kp N9    &kp N0   &trans
&kp TAB   &kp CARET &kp Q    &kp W    &kp E     &kp R                           &kp Y   &kp U     &kp I     &kp O     &kp P    &trans
&kp COMMA &kp LCTRL &kp A    &kp S    &kp D     &kp F                           &kp H   &kp J     &kp K     &kp L     &kp SEMI &kp SQT
&kp DOT   &kp LSHFT &kp Z    &kp X    &kp C     &kp V     &trans       &trans   &kp N   &kp M     &kp COMMA &kp DOT   &kp FSLH &kp RSHFT
                    &kp LGUI &kp LALT &kp LCTRL &kp SPACE &kp SPACE    &kp RET  &mo 2   &kp RCTRL &to 4     &to 0
			>;

			sensor-bindings = <&inc_dec_kp C_VOL_UP C_VOL_DN &inc_dec_kp PG_UP PG_DN>;
		};
    };
};